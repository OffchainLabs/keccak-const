//! Tests from https://github.com/emn178/js-sha3/blob/master/tests/test-shake.js

use sha3_const::Shake128;
use sha3_const::Shake256;

#[test]
fn shake128_empty_string_with_32_byte_output() {
    let hasher = Shake128::new();
    let mut output = [0; 32];
    let mut reader = hasher.finalize_xof();
    reader.read(&mut output[..10]);
    reader.read(&mut output[10..]);

    assert_eq!(
        [
            0x7f, 0x9c, 0x2b, 0xa4, 0xe8, 0x8f, 0x82, 0x7d, 0x61, 0x60, 0x45, 0x50, 0x76, 0x05,
            0x85, 0x3e, 0xd7, 0x3b, 0x80, 0x93, 0xf6, 0xef, 0xbc, 0x88, 0xeb, 0x1a, 0x6e, 0xac,
            0xfa, 0x66, 0xef, 0x26,
        ],
        output
    );
    assert_eq!(output, hasher.finalize());
}

#[test]
fn shake128_quick_brown_fox_with_32_byte_output() {
    let hasher = Shake128::new().update(b"The quick brown fox jumps over the lazy dog");
    let output = hasher.finalize();

    assert_eq!(
        [
            0xf4, 0x20, 0x2e, 0x3c, 0x58, 0x52, 0xf9, 0x18, 0x2a, 0x04, 0x30, 0xfd, 0x81, 0x44,
            0xf0, 0xa7, 0x4b, 0x95, 0xe7, 0x41, 0x7e, 0xca, 0xe1, 0x7d, 0xb0, 0xf8, 0xcf, 0xee,
            0xd0, 0xe3, 0xe6, 0x6e,
        ],
        output
    );
}

#[test]
fn shake128_empty_string_with_single_byte_output() {
    assert_eq!([0x7f], Shake128::new().finalize());
}

#[test]
fn shake128_quick_brown_fox_with_single_byte_output() {
    let mut output = [0; 1];

    Shake128::new()
        .update(b"The quick brown fox jumps over the lazy dog")
        .finalize_xof()
        .read(&mut output);

    assert_eq!([0xf4], output);
}

#[test]
fn shake128_updates() {
    let mut beginning_output = [0; 32];
    let mut end_output = [0; 32];

    let mut hasher = Shake128::new().update(b"");
    hasher.finalize_xof().read(&mut beginning_output);
    hasher = hasher
        .update(b"The quick ")
        .update(b"brown fox ")
        .update(b"jumps over ")
        .update(b"")
        .update(b"the lazy dog");
    hasher.finalize_xof().read(&mut end_output);

    assert_eq!(
        [
            0x7f, 0x9c, 0x2b, 0xa4, 0xe8, 0x8f, 0x82, 0x7d, 0x61, 0x60, 0x45, 0x50, 0x76, 0x05,
            0x85, 0x3e, 0xd7, 0x3b, 0x80, 0x93, 0xf6, 0xef, 0xbc, 0x88, 0xeb, 0x1a, 0x6e, 0xac,
            0xfa, 0x66, 0xef, 0x26
        ],
        beginning_output
    );
    assert_eq!(
        [
            0xf4, 0x20, 0x2e, 0x3c, 0x58, 0x52, 0xf9, 0x18, 0x2a, 0x04, 0x30, 0xfd, 0x81, 0x44,
            0xf0, 0xa7, 0x4b, 0x95, 0xe7, 0x41, 0x7e, 0xca, 0xe1, 0x7d, 0xb0, 0xf8, 0xcf, 0xee,
            0xd0, 0xe3, 0xe6, 0x6e
        ],
        end_output
    );
}

#[test]
fn shake128_with_172_byte_output() {
    let mut output = [0; 172];

    let hasher = Shake128::new().update(b"AAA");
    hasher.finalize_xof().read(&mut output);

    assert_eq!(
        [
            0x15, 0xe0, 0xfe, 0x49, 0x5a, 0x05, 0xb7, 0x4f, 0x9f, 0xd3, 0xea, 0xa8, 0xa8, 0x98,
            0xa6, 0x23, 0x48, 0x82, 0x20, 0xdc, 0xbf, 0x9b, 0xa2, 0xf1, 0x2d, 0x23, 0xd2, 0x78,
            0xb7, 0xce, 0xcf, 0xa4, 0xa5, 0xe4, 0xb8, 0xd0, 0xfc, 0xcb, 0x0f, 0xdb, 0xc9, 0xe5,
            0x1c, 0xd0, 0xb4, 0x34, 0x4a, 0x32, 0xa8, 0x3f, 0x0b, 0xa4, 0x0a, 0x51, 0x4a, 0x7b,
            0x86, 0xa7, 0x7c, 0x85, 0x4c, 0x61, 0xb8, 0x36, 0x19, 0x28, 0x49, 0xda, 0x92, 0x14,
            0xc4, 0x3c, 0x4f, 0x8b, 0xc0, 0x9e, 0xc7, 0xa7, 0x6a, 0xf9, 0x2b, 0x2f, 0xc5, 0x6e,
            0x49, 0x52, 0x02, 0x4b, 0xe6, 0x5b, 0x1a, 0x47, 0x83, 0x5e, 0x0b, 0xc0, 0x14, 0x73,
            0x3b, 0x24, 0xd0, 0xe3, 0x11, 0x97, 0xca, 0x64, 0x8f, 0x83, 0x1c, 0xae, 0xbb, 0xfd,
            0x8a, 0x5b, 0x23, 0x7a, 0xe6, 0xbd, 0xc9, 0xd6, 0xcc, 0x80, 0x3a, 0x2c, 0x5e, 0x57,
            0xdd, 0x93, 0x46, 0xee, 0xcf, 0x97, 0x2b, 0xd8, 0x54, 0x50, 0xf1, 0x8a, 0x41, 0x3d,
            0xc6, 0x23, 0x99, 0x82, 0xe1, 0xeb, 0x6e, 0x0c, 0x6d, 0xf8, 0x56, 0x38, 0x5c, 0x95,
            0x97, 0xd0, 0x32, 0x0e, 0xdb, 0x40, 0xb6, 0xfe, 0x60, 0xa7, 0x4f, 0x07, 0x52, 0x40,
            0x15, 0xad, 0x36, 0xb6
        ],
        output
    );
}

#[test]
fn shake256_empty_string_with_single_byte_output() {
    assert_eq!([0x46], Shake256::new().finalize());
}

#[test]
fn shake256_empty_string_with_512_byte_output() {
    assert_eq!(
        [
            0x46, 0xb9, 0xdd, 0x2b, 0x0b, 0xa8, 0x8d, 0x13, 0x23, 0x3b, 0x3f, 0xeb, 0x74, 0x3e,
            0xeb, 0x24, 0x3f, 0xcd, 0x52, 0xea, 0x62, 0xb8, 0x1b, 0x82, 0xb5, 0x0c, 0x27, 0x64,
            0x6e, 0xd5, 0x76, 0x2f, 0xd7, 0x5d, 0xc4, 0xdd, 0xd8, 0xc0, 0xf2, 0x00, 0xcb, 0x05,
            0x01, 0x9d, 0x67, 0xb5, 0x92, 0xf6, 0xfc, 0x82, 0x1c, 0x49, 0x47, 0x9a, 0xb4, 0x86,
            0x40, 0x29, 0x2e, 0xac, 0xb3, 0xb7, 0xc4, 0xbe, 0x14, 0x1e, 0x96, 0x61, 0x6f, 0xb1,
            0x39, 0x57, 0x69, 0x2c, 0xc7, 0xed, 0xd0, 0xb4, 0x5a, 0xe3, 0xdc, 0x07, 0x22, 0x3c,
            0x8e, 0x92, 0x93, 0x7b, 0xef, 0x84, 0xbc, 0x0e, 0xab, 0x86, 0x28, 0x53, 0x34, 0x9e,
            0xc7, 0x55, 0x46, 0xf5, 0x8f, 0xb7, 0xc2, 0x77, 0x5c, 0x38, 0x46, 0x2c, 0x50, 0x10,
            0xd8, 0x46, 0xc1, 0x85, 0xc1, 0x51, 0x11, 0xe5, 0x95, 0x52, 0x2a, 0x6b, 0xcd, 0x16,
            0xcf, 0x86, 0xf3, 0xd1, 0x22, 0x10, 0x9e, 0x3b, 0x1f, 0xdd, 0x94, 0x3b, 0x6a, 0xec,
            0x46, 0x8a, 0x2d, 0x62, 0x1a, 0x7c, 0x06, 0xc6, 0xa9, 0x57, 0xc6, 0x2b, 0x54, 0xda,
            0xfc, 0x3b, 0xe8, 0x75, 0x67, 0xd6, 0x77, 0x23, 0x13, 0x95, 0xf6, 0x14, 0x72, 0x93,
            0xb6, 0x8c, 0xea, 0xb7, 0xa9, 0xe0, 0xc5, 0x8d, 0x86, 0x4e, 0x8e, 0xfd, 0xe4, 0xe1,
            0xb9, 0xa4, 0x6c, 0xbe, 0x85, 0x47, 0x13, 0x67, 0x2f, 0x5c, 0xaa, 0xae, 0x31, 0x4e,
            0xd9, 0x08, 0x3d, 0xab, 0x4b, 0x09, 0x9f, 0x8e, 0x30, 0x0f, 0x01, 0xb8, 0x65, 0x0f,
            0x1f, 0x4b, 0x1d, 0x8f, 0xcf, 0x3f, 0x3c, 0xb5, 0x3f, 0xb8, 0xe9, 0xeb, 0x2e, 0xa2,
            0x03, 0xbd, 0xc9, 0x70, 0xf5, 0x0a, 0xe5, 0x54, 0x28, 0xa9, 0x1f, 0x7f, 0x53, 0xac,
            0x26, 0x6b, 0x28, 0x41, 0x9c, 0x37, 0x78, 0xa1, 0x5f, 0xd2, 0x48, 0xd3, 0x39, 0xed,
            0xe7, 0x85, 0xfb, 0x7f, 0x5a, 0x1a, 0xaa, 0x96, 0xd3, 0x13, 0xea, 0xcc, 0x89, 0x09,
            0x36, 0xc1, 0x73, 0xcd, 0xcd, 0x0f, 0xab, 0x88, 0x2c, 0x45, 0x75, 0x5f, 0xeb, 0x3a,
            0xed, 0x96, 0xd4, 0x77, 0xff, 0x96, 0x39, 0x0b, 0xf9, 0xa6, 0x6d, 0x13, 0x68, 0xb2,
            0x08, 0xe2, 0x1f, 0x7c, 0x10, 0xd0, 0x4a, 0x3d, 0xbd, 0x4e, 0x36, 0x06, 0x33, 0xe5,
            0xdb, 0x4b, 0x60, 0x26, 0x01, 0xc1, 0x4c, 0xea, 0x73, 0x7d, 0xb3, 0xdc, 0xf7, 0x22,
            0x63, 0x2c, 0xc7, 0x78, 0x51, 0xcb, 0xdd, 0xe2, 0xaa, 0xf0, 0xa3, 0x3a, 0x07, 0xb3,
            0x73, 0x44, 0x5d, 0xf4, 0x90, 0xcc, 0x8f, 0xc1, 0xe4, 0x16, 0x0f, 0xf1, 0x18, 0x37,
            0x8f, 0x11, 0xf0, 0x47, 0x7d, 0xe0, 0x55, 0xa8, 0x1a, 0x9e, 0xda, 0x57, 0xa4, 0xa2,
            0xcf, 0xb0, 0xc8, 0x39, 0x29, 0xd3, 0x10, 0x91, 0x2f, 0x72, 0x9e, 0xc6, 0xcf, 0xa3,
            0x6c, 0x6a, 0xc6, 0xa7, 0x58, 0x37, 0x14, 0x30, 0x45, 0xd7, 0x91, 0xcc, 0x85, 0xef,
            0xf5, 0xb2, 0x19, 0x32, 0xf2, 0x38, 0x61, 0xbc, 0xf2, 0x3a, 0x52, 0xb5, 0xda, 0x67,
            0xea, 0xf7, 0xba, 0xae, 0x0f, 0x5f, 0xb1, 0x36, 0x9d, 0xb7, 0x8f, 0x3a, 0xc4, 0x5f,
            0x8c, 0x4a, 0xc5, 0x67, 0x1d, 0x85, 0x73, 0x5c, 0xdd, 0xdb, 0x09, 0xd2, 0xb1, 0xe3,
            0x4a, 0x1f, 0xc0, 0x66, 0xff, 0x4a, 0x16, 0x2c, 0xb2, 0x63, 0xd6, 0x54, 0x12, 0x74,
            0xae, 0x2f, 0xcc, 0x86, 0x5f, 0x61, 0x8a, 0xbe, 0x27, 0xc1, 0x24, 0xcd, 0x8b, 0x07,
            0x4c, 0xcd, 0x51, 0x63, 0x01, 0xb9, 0x18, 0x75, 0x82, 0x4d, 0x09, 0x95, 0x8f, 0x34,
            0x1e, 0xf2, 0x74, 0xbd, 0xab, 0x0b, 0xae, 0x31, 0x63, 0x39, 0x89, 0x43, 0x04, 0xe3,
            0x58, 0x77, 0xb0, 0xc2, 0x8a, 0x9b, 0x1f, 0xd1, 0x66, 0xc7, 0x96, 0xb9, 0xcc, 0x25,
            0x8a, 0x06, 0x4a, 0x8f, 0x57, 0xe2, 0x7f, 0x2a
        ],
        Shake256::new().finalize(),
    );
}

#[test]
fn shake256_large_input_with_512_byte_output() {
    let mut output = [0; 512];
    let hasher = Shake256::new().update(&[
        0x3A, 0x3A, 0x81, 0x9C, 0x48, 0xEF, 0xDE, 0x2A, 0xD9, 0x14, 0xFB, 0xF0, 0x0E, 0x18, 0xAB,
        0x6B, 0xC4, 0xF1, 0x45, 0x13, 0xAB, 0x27, 0xD0, 0xC1, 0x78, 0xA1, 0x88, 0xB6, 0x14, 0x31,
        0xE7, 0xF5, 0x62, 0x3C, 0xB6, 0x6B, 0x23, 0x34, 0x67, 0x75, 0xD3, 0x86, 0xB5, 0x0E, 0x98,
        0x2C, 0x49, 0x3A, 0xDB, 0xBF, 0xC5, 0x4B, 0x9A, 0x3C, 0xD3, 0x83, 0x38, 0x23, 0x36, 0xA1,
        0xA0, 0xB2, 0x15, 0x0A, 0x15, 0x35, 0x8F, 0x33, 0x6D, 0x03, 0xAE, 0x18, 0xF6, 0x66, 0xC7,
        0x57, 0x3D, 0x55, 0xC4, 0xFD, 0x18, 0x1C, 0x29, 0xE6, 0xCC, 0xFD, 0xE6, 0x3E, 0xA3, 0x5F,
        0x0A, 0xDF, 0x58, 0x85, 0xCF, 0xC0, 0xA3, 0xD8, 0x4A, 0x2B, 0x2E, 0x4D, 0xD2, 0x44, 0x96,
        0xDB, 0x78, 0x9E, 0x66, 0x31, 0x70, 0xCE, 0xF7, 0x47, 0x98, 0xAA, 0x1B, 0xBC, 0xD4, 0x57,
        0x4E, 0xA0, 0xBB, 0xA4, 0x04, 0x89, 0xD7, 0x64, 0xB2, 0xF8, 0x3A, 0xAD, 0xC6, 0x6B, 0x14,
        0x8B, 0x4A, 0x0C, 0xD9, 0x52, 0x46, 0xC1, 0x27, 0xD5, 0x87, 0x1C, 0x4F, 0x11, 0x41, 0x86,
        0x90, 0xA5, 0xDD, 0xF0, 0x12, 0x46, 0xA0, 0xC8, 0x0A, 0x43, 0xC7, 0x00, 0x88, 0xB6, 0x18,
        0x36, 0x39, 0xDC, 0xFD, 0xA4, 0x12, 0x5B, 0xD1, 0x13, 0xA8, 0xF4, 0x9E, 0xE2, 0x3E, 0xD3,
        0x06, 0xFA, 0xAC, 0x57, 0x6C, 0x3F, 0xB0, 0xC1, 0xE2, 0x56, 0x67, 0x1D, 0x81, 0x7F, 0xC2,
        0x53, 0x4A, 0x52, 0xF5, 0xB4, 0x39, 0xF7, 0x2E, 0x42, 0x4D, 0xE3, 0x76, 0xF4, 0xC5, 0x65,
        0xCC, 0xA8, 0x23, 0x07, 0xDD, 0x9E, 0xF7, 0x6D, 0xA5, 0xB7, 0xC4, 0xEB, 0x7E, 0x08, 0x51,
        0x72, 0xE3, 0x28, 0x80, 0x7C, 0x02, 0xD0, 0x11, 0xFF, 0xBF, 0x33, 0x78, 0x53, 0x78, 0xD7,
        0x9D, 0xC2, 0x66, 0xF6, 0xA5, 0xBE, 0x6B, 0xB0, 0xE4, 0xA9, 0x2E, 0xCE, 0xEB, 0xAE, 0xB1,
    ]);
    let mut reader = hasher.finalize_xof();
    reader.read(&mut output[..202]);
    reader.read(&mut output[202..]);

    assert_eq!(
        [
            0x8a, 0x51, 0x99, 0xb4, 0xa7, 0xe1, 0x33, 0xe2, 0x64, 0xa8, 0x62, 0x02, 0x72, 0x06,
            0x55, 0x89, 0x4d, 0x48, 0xcf, 0xf3, 0x44, 0xa9, 0x28, 0xcf, 0x83, 0x47, 0xf4, 0x83,
            0x79, 0xce, 0xf3, 0x47, 0xdf, 0xc5, 0xbc, 0xff, 0xab, 0x99, 0xb2, 0x7b, 0x1f, 0x89,
            0xaa, 0x27, 0x35, 0xe2, 0x3d, 0x30, 0x08, 0x8f, 0xfa, 0x03, 0xb9, 0xed, 0xb0, 0x2b,
            0x96, 0x35, 0x47, 0x0a, 0xb9, 0xf1, 0x03, 0x89, 0x85, 0xd5, 0x5f, 0x9c, 0xa7, 0x74,
            0x57, 0x2d, 0xd0, 0x06, 0x47, 0x0e, 0xa6, 0x51, 0x45, 0x46, 0x96, 0x09, 0xf9, 0xfa,
            0x08, 0x31, 0xbf, 0x1f, 0xfd, 0x84, 0x2d, 0xc2, 0x4a, 0xca, 0xde, 0x27, 0xbd, 0x98,
            0x16, 0xe3, 0xb5, 0xbf, 0x28, 0x76, 0xcb, 0x11, 0x22, 0x32, 0xa0, 0xeb, 0x44, 0x75,
            0xf1, 0xdf, 0xf9, 0xf5, 0xc7, 0x13, 0xd9, 0xff, 0xd4, 0xcc, 0xb8, 0x9a, 0xe5, 0x60,
            0x7f, 0xe3, 0x57, 0x31, 0xdf, 0x06, 0x31, 0x79, 0x49, 0xee, 0xf6, 0x46, 0xe9, 0x59,
            0x1c, 0xf3, 0xbe, 0x53, 0xad, 0xd6, 0xb7, 0xdd, 0x2b, 0x60, 0x96, 0xe2, 0xb3, 0xfb,
            0x06, 0xe6, 0x62, 0xec, 0x8b, 0x2d, 0x77, 0x42, 0x2d, 0xaa, 0xd9, 0x46, 0x3c, 0xd1,
            0x55, 0x20, 0x4a, 0xcd, 0xbd, 0x38, 0xe3, 0x19, 0x61, 0x3f, 0x39, 0xf9, 0x9b, 0x6d,
            0xfb, 0x35, 0xca, 0x93, 0x65, 0x16, 0x00, 0x66, 0xdb, 0x19, 0x83, 0x58, 0x88, 0xc2,
            0x24, 0x1f, 0xf9, 0xa7, 0x31, 0xa4, 0xac, 0xbb, 0x56, 0x63, 0x72, 0x7a, 0xac, 0x34,
            0xa4, 0x01, 0x24, 0x7f, 0xba, 0xa7, 0x49, 0x9e, 0x7d, 0x5e, 0xe5, 0xb6, 0x9d, 0x31,
            0x02, 0x5e, 0x63, 0xd0, 0x4c, 0x35, 0xc7, 0x98, 0xbc, 0xa1, 0x26, 0x2d, 0x56, 0x73,
            0xa9, 0xcf, 0x09, 0x30, 0xb5, 0xad, 0x89, 0xbd, 0x48, 0x55, 0x99, 0xdc, 0x18, 0x45,
            0x28, 0xda, 0x47, 0x90, 0xf0, 0x88, 0xeb, 0xd1, 0x70, 0xb6, 0x35, 0xd9, 0x58, 0x16,
            0x32, 0xd2, 0xff, 0x90, 0xdb, 0x79, 0x66, 0x5c, 0xed, 0x43, 0x00, 0x89, 0xaf, 0x13,
            0xc9, 0xf2, 0x1f, 0x6d, 0x44, 0x3a, 0x81, 0x80, 0x64, 0xf1, 0x7a, 0xec, 0x9e, 0x9c,
            0x54, 0x57, 0x00, 0x1f, 0xa8, 0xdc, 0x6a, 0xfb, 0xad, 0xbe, 0x31, 0x38, 0xf3, 0x88,
            0xd8, 0x9d, 0x0e, 0x6f, 0x22, 0xf6, 0x66, 0x71, 0x25, 0x5b, 0x21, 0x07, 0x54, 0xed,
            0x63, 0xd8, 0x1d, 0xce, 0x75, 0xce, 0x8f, 0x18, 0x9b, 0x53, 0x4e, 0x6d, 0x6b, 0x35,
            0x39, 0xaa, 0x51, 0xe8, 0x37, 0xc4, 0x2d, 0xf9, 0xdf, 0x59, 0xc7, 0x1e, 0x61, 0x71,
            0xcd, 0x49, 0x02, 0xfe, 0x1b, 0xdc, 0x73, 0xfb, 0x17, 0x75, 0xb5, 0xc7, 0x54, 0xa1,
            0xed, 0x4e, 0xa7, 0xf3, 0x10, 0x5f, 0xc5, 0x43, 0xee, 0x04, 0x18, 0xda, 0xd2, 0x56,
            0xf3, 0xf6, 0x11, 0x8e, 0xa7, 0x71, 0x14, 0xa1, 0x6c, 0x15, 0x35, 0x5b, 0x42, 0x87,
            0x7a, 0x1d, 0xb2, 0xa7, 0xdf, 0x0e, 0x15, 0x5a, 0xe1, 0xd8, 0x67, 0x0a, 0xbc, 0xec,
            0x34, 0x50, 0xf4, 0xe2, 0xee, 0xc9, 0x83, 0x8f, 0x89, 0x54, 0x23, 0xef, 0x63, 0xd2,
            0x61, 0x13, 0x8b, 0xaa, 0xf5, 0xd9, 0xf1, 0x04, 0xcb, 0x5a, 0x95, 0x7a, 0xea, 0x06,
            0xc0, 0xb9, 0xb8, 0xc7, 0x8b, 0x0d, 0x44, 0x17, 0x96, 0xdc, 0x03, 0x50, 0xdd, 0xea,
            0xbb, 0x78, 0xa3, 0x3b, 0x6f, 0x1f, 0x9e, 0x68, 0xed, 0xe3, 0xd1, 0x80, 0x5c, 0x7b,
            0x7e, 0x2c, 0xfd, 0x54, 0xe0, 0xfa, 0xd6, 0x2f, 0x0d, 0x8c, 0xa6, 0x7a, 0x77, 0x5d,
            0xc4, 0x54, 0x6a, 0xf9, 0x09, 0x6f, 0x2e, 0xdb, 0x22, 0x1d, 0xb4, 0x28, 0x43, 0xd6,
            0x53, 0x27, 0x86, 0x12, 0x82, 0xdc, 0x94, 0x6a, 0x0b, 0xa0, 0x1a, 0x11, 0x86, 0x3a,
            0xb2, 0xd1, 0xdf, 0xd1, 0x6e, 0x39, 0x73, 0xd4
        ],
        output,
    );
}
